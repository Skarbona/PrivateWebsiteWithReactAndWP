{"version":3,"sources":["serviceWorker.js","containers/shared/Header.js","containers/Home/Home.js","components/Home/HomeHero.js","App.js","reducers/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","elems","assertThisInitialized","sideNav","current","M","Sidenav","init","React","createRef","react_default","a","createElement","Fragment","className","Link","to","href","data-target","id","ref","Component","Home","state","HomeHero","console","log","App","shared_Header","Switch","Route","path","component","exact","Redirect","combineReducers","replace","app","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducers","BrowserRouter","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0aa47d5d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport M from 'materialize-css'\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Header extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.sideNav = React.createRef();\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const { sideNav } = this;\r\n\r\n        const elems = sideNav.current;\r\n        M.Sidenav.init(elems);\r\n\r\n    };\r\n\r\n    render() {\r\n        const { sideNav } = this;\r\n        return (\r\n            <React.Fragment>\r\n                <nav className=\"light-blue darken-1\">\r\n                    <div className=\"nav-wrapper container\">\r\n                        <Link to=\"/\" className=\"brand-logo\">FilipS.oko≈Çowski</Link>\r\n                        <a href=\"#\" data-target=\"mobile-demo\" className=\"sidenav-trigger\"><i\r\n                            className=\"material-icons\">menu</i></a>\r\n                        <ul className=\"right hide-on-med-and-down\">\r\n                            <li><Link to=\"/home\">Home</Link></li>\r\n                            <li><a href=\"badges.html\">Components</a></li>\r\n                            <li><a href=\"collapsible.html\">Javascript</a></li>\r\n                            <li><a href=\"mobile.html\">Mobile</a></li>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n\r\n                <ul className=\"sidenav\" id=\"mobile-demo\" ref={sideNav}>\r\n                    <li><a href=\"sass.html\">Sass</a></li>\r\n                    <li><a href=\"badges.html\">Components</a></li>\r\n                    <li><a href=\"collapsible.html\">Javascript</a></li>\r\n                    <li><a href=\"mobile.html\">Mobile</a></li>\r\n                </ul>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n\r\n    state = {};\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"section no-pad-bot\" id=\"index-banner\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"header center orange-text\">Starter Template</h1>\r\n                    <div className=\"row center\">\r\n                        <h5 className=\"header col s12 light\">A modern responsive front-end framework based on Material\r\n                            Design</h5>\r\n                    </div>\r\n                    <div className=\"row center\">\r\n                        <a href=\"http://materializecss.com/getting-started.html\" id=\"download-button\" className=\"btn-large waves-effect waves-light orange\">Get Started</a>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst HomeHero = (props) => {\r\n    console.log('HERO COMPONENT!!');\r\n    return (\r\n        <div>\r\n            Home Hero 256\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomeHero;\r\n","import React from 'react';\nimport './App.scss';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nimport Header from './containers/shared/Header';\nimport Home from './containers/Home/Home'\nimport HomeHero from './components/Home/HomeHero'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n          <Header/>\n            <Switch>\n                <Route path=\"/home\" component={HomeHero} />\n                <Route exact path=\"/\"  component={Home} />\n                <Redirect to=\"/\" />\n            </Switch>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\n\r\n\r\nexport default combineReducers({\r\n    replace : () => 'hello'\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers);\n\nconst app = (\n\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n\n);\n\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}